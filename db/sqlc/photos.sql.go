// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: photos.sql

package db

import (
	"context"
	"database/sql"
)

const createPhoto = `-- name: CreatePhoto :one
INSERT INTO "photos" (
  user_id,
  image
) VALUES (
  $1, $2
)
RETURNING id, user_id, image, created_at
`

type CreatePhotoParams struct {
	UserID sql.NullInt32  `json:"userID"`
	Image  sql.NullString `json:"image"`
}

func (q *Queries) CreatePhoto(ctx context.Context, arg CreatePhotoParams) (Photos, error) {
	row := q.db.QueryRowContext(ctx, createPhoto, arg.UserID, arg.Image)
	var i Photos
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const deletePhoto = `-- name: DeletePhoto :exec
DELETE FROM "photos"
WHERE id = $1
`

func (q *Queries) DeletePhoto(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePhoto, id)
	return err
}

const userPhotoList = `-- name: UserPhotoList :many
SELECT id, user_id, image, created_at FROM "photos"
WHERE user_id = $1
ORDER BY created_at
LIMIT $2
`

type UserPhotoListParams struct {
	UserID sql.NullInt32 `json:"userID"`
	Limit  int32         `json:"limit"`
}

func (q *Queries) UserPhotoList(ctx context.Context, arg UserPhotoListParams) ([]Photos, error) {
	rows, err := q.db.QueryContext(ctx, userPhotoList, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Photos
	for rows.Next() {
		var i Photos
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
