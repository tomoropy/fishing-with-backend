// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: invitations.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createInvitation = `-- name: CreateInvitation :one
INSERT INTO "invitations" (
  title,
  place,
  people,
  start_time,
  end_time,
  transpost,
  comment,
  applicant,
  image
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, user_id, title, place, people, start_time, end_time, transpost, comment, applicant, image, created_at
`

type CreateInvitationParams struct {
	Title     string         `json:"title"`
	Place     string         `json:"place"`
	People    int32          `json:"people"`
	StartTime time.Time      `json:"startTime"`
	EndTime   time.Time      `json:"endTime"`
	Transpost string         `json:"transpost"`
	Comment   sql.NullString `json:"comment"`
	Applicant sql.NullInt32  `json:"applicant"`
	Image     sql.NullString `json:"image"`
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitations, error) {
	row := q.db.QueryRowContext(ctx, createInvitation,
		arg.Title,
		arg.Place,
		arg.People,
		arg.StartTime,
		arg.EndTime,
		arg.Transpost,
		arg.Comment,
		arg.Applicant,
		arg.Image,
	)
	var i Invitations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Place,
		&i.People,
		&i.StartTime,
		&i.EndTime,
		&i.Transpost,
		&i.Comment,
		&i.Applicant,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const deleteInvitation = `-- name: DeleteInvitation :exec
DELETE FROM "invitations"
WHERE id = $1
`

func (q *Queries) DeleteInvitation(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteInvitation, id)
	return err
}

const getInvitation = `-- name: GetInvitation :one
SELECT id, user_id, title, place, people, start_time, end_time, transpost, comment, applicant, image, created_at FROM "invitations"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvitation(ctx context.Context, id int32) (Invitations, error) {
	row := q.db.QueryRowContext(ctx, getInvitation, id)
	var i Invitations
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Place,
		&i.People,
		&i.StartTime,
		&i.EndTime,
		&i.Transpost,
		&i.Comment,
		&i.Applicant,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const listInvitation = `-- name: ListInvitation :many
SELECT id, user_id, title, place, people, start_time, end_time, transpost, comment, applicant, image, created_at FROM "invitations"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListInvitationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInvitation(ctx context.Context, arg ListInvitationParams) ([]Invitations, error) {
	rows, err := q.db.QueryContext(ctx, listInvitation, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invitations{}
	for rows.Next() {
		var i Invitations
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Place,
			&i.People,
			&i.StartTime,
			&i.EndTime,
			&i.Transpost,
			&i.Comment,
			&i.Applicant,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvitationByUser = `-- name: ListInvitationByUser :many
SELECT id, user_id, title, place, people, start_time, end_time, transpost, comment, applicant, image, created_at FROM "invitations"
WHERE user_id = $1
ORDER BY id
LIMIT $2
`

type ListInvitationByUserParams struct {
	UserID sql.NullInt32 `json:"userID"`
	Limit  int32         `json:"limit"`
}

func (q *Queries) ListInvitationByUser(ctx context.Context, arg ListInvitationByUserParams) ([]Invitations, error) {
	rows, err := q.db.QueryContext(ctx, listInvitationByUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invitations{}
	for rows.Next() {
		var i Invitations
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Place,
			&i.People,
			&i.StartTime,
			&i.EndTime,
			&i.Transpost,
			&i.Comment,
			&i.Applicant,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvitation = `-- name: UpdateInvitation :exec
UPDATE "invitations" 
set   
  title = $2,
  place = $3,
  people = $4,
  start_time = $5,
  end_time = $6,
  transpost = $7,
  comment = $8,
  applicant = $9,
  image = $10
WHERE id = $1
RETURNING id, user_id, title, place, people, start_time, end_time, transpost, comment, applicant, image, created_at
`

type UpdateInvitationParams struct {
	ID        int32          `json:"id"`
	Title     string         `json:"title"`
	Place     string         `json:"place"`
	People    int32          `json:"people"`
	StartTime time.Time      `json:"startTime"`
	EndTime   time.Time      `json:"endTime"`
	Transpost string         `json:"transpost"`
	Comment   sql.NullString `json:"comment"`
	Applicant sql.NullInt32  `json:"applicant"`
	Image     sql.NullString `json:"image"`
}

func (q *Queries) UpdateInvitation(ctx context.Context, arg UpdateInvitationParams) error {
	_, err := q.db.ExecContext(ctx, updateInvitation,
		arg.ID,
		arg.Title,
		arg.Place,
		arg.People,
		arg.StartTime,
		arg.EndTime,
		arg.Transpost,
		arg.Comment,
		arg.Applicant,
		arg.Image,
	)
	return err
}
